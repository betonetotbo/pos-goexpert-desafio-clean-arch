// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
)

const createOrder = `-- name: CreateOrder :exec
insert into orders (id, price, tax, final_price) values(?, ?, ?, ?)
`

type CreateOrderParams struct {
	ID         string
	Price      float64
	Tax        float64
	FinalPrice float64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.Price,
		arg.Tax,
		arg.FinalPrice,
	)
	return err
}

const listOrders = `-- name: ListOrders :many
select id, price, tax, final_price from orders limit ? offset ?
`

type ListOrdersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Tax,
			&i.FinalPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
